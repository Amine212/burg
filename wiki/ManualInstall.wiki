#summary How to compile and install BURG using source code
#labels burg,manual,install,compile,source

= Preparation =

To compile the pc version of BURG, you need to have following software:

autoconf
automake
gettext
bison
gcc
make
ruby
python

The emulated version of BURG requires extra software:

ncurses sdl

In debian/ubuntu, you can use apt-get to install all dependence:
{{{
sudo apt-get build-dep burg-pc burg-emu
}}}

= Download source code =

You need to install bazaar, binary package for many platform is available from:

http://wiki.bazaar.canonical.com/Download

In debian/ubuntu, you can use apt-get to install it:
{{{
sudo apt-get install bzr
}}}

To download source for the first time:
{{{
bzr branch lp:burg
}}}

To sync a previously downloaded source tree to the latest version (This should be run in the burg source directory):
{{{
bzr pull
}}}


After each update, you need to regenerate the configuration files by running this command in the burg source directory:
{{{
./autogen.sh
}}}

= Compile and install =

I recommend using a separate directory for compilation, this makes the original source tree a lot cleaner. It's also better to use a different install directory so that it won't overwrite the one installed by apt-get. In the following example, I uses $HOME/burg_pc and $HOME/burg_emu for compilation, and $HOME/burg_install as the target install directory. The source code of BURG is assumed to be in $HOME/burg.

To compile and install pc version of BURG:
{{{
mkdir $HOME/burg_pc
cd $HOME/burg_pc
$HOME/burg/configure --with-platform=pc --prefix=$HOME/burg_install
make
make install
}}}

To compile and install emulated version of BURG:
{{{
mkdir $HOME/burg_emu
cd $HOME/burg_emu
$HOME/burg/configure --with-platform=emu --prefix=$HOME/burg_install
make
make install
}}}

= Configure =

You need to create a configuration file at $HOME/burg_install/etc/default/burg, you can copy it from /etc/default/burg, or create from scratch, here is an example:

{{{
# If you change this file, run 'update-burg' afterwards to update
# /boot/burg/burg.cfg.

GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT="quiet"
GRUB_CMDLINE_LINUX=""

# Uncomment to disable graphical terminal (grub-pc only)
#GRUB_TERMINAL=console

# The resolution used on graphical terminal
# note that you can use only modes which your graphic card supports via VBE
# you can see them in real GRUB with the command `vbeinfo'
#GRUB_GFXMODE=640x480

# Uncomment if you don't want GRUB to pass "root=UUID=xxx" parameter to Linux
#GRUB_DISABLE_LINUX_UUID=true

# Uncomment to disable generation of recovery mode menu entries
#GRUB_DISABLE_LINUX_RECOVERY="true"

# Download theme and font from http://code.google.com/p/burg/downloads/list,
# then uncomment this to enable it.
GRUB_THEME=saved
#GRUB_THEME=/boot/burg/themes/debian-theme/theme.txt

# Uncomment to enable folding of similar boot items.
GRUB_FOLD=saved
}}}

If you have customized boot items, you need to copy /etc/burg.d/40_custom to $HOME/burg_install/etc/burg.d/40_custom.

Now, install it to MBR so that it will take effect on the next boot:
{{{
sudo $HOME/burg_install/sbin/burg-install /dev/sda
sudo $HOME/burg_install/sbin/burg-mkconfig -o /boot/burg/burg.cfg
}}}

To switch back to default BURG, just run burg-install and update-burg without the $HOME/burg_install/sbin prefix.